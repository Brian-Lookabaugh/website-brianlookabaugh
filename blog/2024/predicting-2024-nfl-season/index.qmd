---
title: "Predicting the 2024-2025 NFL Season"
date: 2024-07-29
description: "Follow my attempts to forecast NFL standings for the upcoming season using vibes and (more importantly), simulations, and machine learning."
image: ""
toc: true
toc-location: "left"
toc-title: "Contents"
categories:
  - machine learning
  - nfl
---

```{r}
#| code-fold: true

# Load Libraries
pacman::p_load(
  "dplyr", # Data Manipulation
  "nflverse", # NFL Verse Environment
  "gt", # Nice Tables
  "tidyr", # Reshaping Data
  "stringr", # Working with Strings
  install = FALSE
)

# Define a Custom Theme - Taken From Andrew Heiss's Blogs
blog_theme <- function() {
  theme_bw() +  # Start with theme_bw
    theme(
      panel.grid.minor = element_blank(),
      plot.background = element_rect(fill = "white", color = NA),
      plot.title = element_text(face = "bold"),
      axis.title = element_text(face = "bold"),
      strip.text = element_text(face = "bold"),
      strip.background = element_rect(fill = "grey80", color = NA),
      legend.title = element_text(face = "bold")
    )
}
```

# My Vibes-Based Predictions

I am a massive fan of professional American football. During the NFL season, I am treated to exciting games, interesting storylines, and cheap (but entertaining) drama generated by the sports media. However, when the NFL season *ends*, I have to be really creative to get my NFL "fix" in. One thing that I really look forward to in the NFL off-season is the schedule release. Once the schedule is released, I can go game-by-game and predict which team will win that match-up. I do this *several* times during the off-season, and I generally notice a consensus from my predictions (see below:)

```{r}
#| label: vibes-predictions
#| tab-cap: "Vibes-Based Projected Standings"
#| code-fold: true

# Create My Vibes Tribble - Adding Extra Spacing
vibes <- tribble(
  ~east, ~record_1, ~space_1, ~north, ~record_2, ~space_2, ~south, ~record_3, ~space_3, ~west, ~record_4, ~conf,
  "BUF", "10-7", " ", "BAL", "13-4", " ", "IND", "13-4", " ", "KC", "12-5", "AFC",
  "NYJ", "9-8", " ", "CIN", "10-7", " ", "HOU", "11-6", " ", "LAC", "11-6", "AFC",
  "MIA", "7-10", " ", "PIT", "8-9", " ","TEN", "9-8", " ", "DEN", "7-10", "AFC",
  "NE", "3-14", " ", "CLE", "8-9", " ", "JAX", "9-8", " ", "LV", "6-11", "AFC",
  "PHI", "9-8", " ", "GB", "12-5", " ", "ATL", "9-8", " ", "LAR", "11-6", "NFC",
  "WSH", "8-9", " ", "DET", "11-6", " ", "TB", "7-10", " ", "SF", "10-7", "NFC",
  "DAL", "7-10", " ", "CHI", "9-8", " ", "CAR", "5-12", " ", "ARZ", "9-8", "NFC",
  "NYG", "5-12", " ", "MIN", "6-11", " ", "NO", "4-13", " ", "SEA", "4-13", "NFC"
)

vibes %>%
  # Group By Conference
  gt(groupname_col = "conf") %>%
  # Create Columns Labels
  cols_label(
    east = "",
    record_1 = "East",
    space_1 = "",
    north = "",
    record_2 = "North",
    space_2 = "",
    south = "",
    record_3 = "South",
    space_3 = "",
    west = "",
    record_4 = "West"
  ) %>%
  # Align Column Title Text
  tab_style(style = cell_text(align = "center"), locations = cells_column_labels()) %>%
  # Align Body Text
  tab_style(style = cell_text(align = "center"), locations = cells_body()) %>%
  # Distinguish Division Rows
  tab_style(
    style = list(
      cell_fill(color = "#bcc0be")),
    locations = cells_body(rows = which(vibes$east %in% c("AFC", "NFC")))) %>%
  # Add Team Logos
  nflplotR::gt_nfl_logos(columns = c("east", "north", "south", "west"))
```

As you can see, I have some fairly tame predictions: the Chiefs will be really good, the Falcons will win the division with a mediocre record, the Giants will not be good, etc. However, I like to think that I generally make bold predictions every year. For example, I have the AFC East having a pretty low win-total. I have the Colts breaking out and taking the AFC South from the Texans. I have the NFC East reverting to the NFC Least (and my Cowboys missing the playoffs). I have the 49ers regressing a bit. 

But, all of this is just based on my gut, and I thought it would be cool to look into NFL forecasting tools and see how much these tools correspond with my intuition (and, to see who was more right once the 2024 NFL regular season is over). So, that is what I will be attempting with this blog post. I am going to compare my vibes-based forecasts with three other forecasts; {nflseedR}'s predictions based on 100 simulated seasons, a machine learning algorithm using simple NFL-metrics as predictors, and a machine learning algorithm using advanced NFL-metrics as predictors.

# Predictions Using {nflseedR}

As it turns out, NFL analytics are well-supported in R. In fact, a collection of packages known as the "nflverse" supply the interested R user within tons of tools that make their NFL analytics experience much richer and easier. For the purposes of this blog post, I am going to rely on the {nflseedR} package, which allows users to simulate entire seasons. In my iteration below, I am simulating the 2024 NFL season 100 times. I then take the average wins for each team and round them, then I compute their losses by taking the total number of games (17) minus their average rounded wins. 

To build dramatic suspense, I won't show you how these results compared to my vibes-based results until the end of this blog. However, you might be interested in how {nflseedR} predicts wins over the course of 100 simulated seasons. A really cool things about {nflseedR} is that you can input your own model into the `simulate_nfl()` function and it will go through each game and make predictions for you with your own model. So, what happens when you *don't* specify a model like I did? I'm not really sure! It's kind of vague from what I can tell from my research... and needless to say, some of these predicted standings are *very bold*. So, I wouldn't put much stock in these.

```{r}
#| message: false

# Run the Simulation
seed_sims <- simulate_nfl(nfl_season = 2024, simulations = 100)

# Extract Information From the Simulations
seed_wins <- seed_sims$teams %>%
  select(conf, division, team, wins) %>%
  # Calculate Average Wins
  group_by(conf, team, division) %>%
  summarise(wins = mean(wins)) %>%
  ungroup() %>%
  # Calculate Losses
  mutate(wins = round(wins),
         losses = 17 - wins) %>%
  # Create Standings as a Character
  mutate(record = paste(wins, losses, sep = "-")) %>%
  # Extract Cardinal Direction
  mutate(direction = str_extract(division, "(?<=\\s).+$")) %>%
  # Within Each Division, Order By Wins
  arrange(direction, division, desc(wins)) %>%
  # Remove Old Columns
  dplyr::select(-c(wins, losses))
```

# Game-by-Game Predictions with Machine Learning (Simple Metrics as Predictors)

We can try and make better predictions with a specific predictors. For now, I am going to start off with some fairly simple predictors. In the next section, I'll run a model using some "higher-level" stats, but, for comparative purposes, I am going to start off with a model using simpler predictors. Keep in mind, there's going to be a lot of error in this because I have to use the *prior* season's statistics as predictors of the *following* season's outcome. We know this doesn't always work since some teams un-expectantly surge from year-to-year and others decline. Further, there is the problem of random "shocks" that really mess things up. For example, if Patrick Mahomes gets injuried in Week 3 for the 2024-2025 NFL season, I'm not so confident that this simple model is going to get the Chief's standings right. Nonetheless, I'm just having fun here. I'm not claiming I've discovered the secret algorithm that will predict NFL games with 99% accuracy.

```{r}
# Import and Merge Features from 2021-2023 Play-by-Play Data
pbp_stats <- load_pbp(2021:2023)

# Collapse to the Game-Level


# Train Model

# Cross Validation

# Forecast 2024 Wins (Pass Predicted Probabilities Into nflseedR)

# Put This Information Into a Table
```

# Game-by-Game Predictions with Machine Learning (Advanced Metrics as Predictors)

```{r}
# Import and Merge Features

# Train Model

# Cross Validation

# Forecast 2024 Wins (Pass Predicted Probabilities Into nflseedR)

# Put This Information Into a Table
```

# Comparing All Predictions (Reveal How I Did)

```{r}

```
