{
  "hash": "e76c1bb9e242f1e4a5ae2c307facaaa8",
  "result": {
    "markdown": "---\ntitle: \"Executing SQL in R\"\nauthor: \"Brian Lookabaugh\"\ntoc: true\ntoc-title: Contents\ncode-tools: true\ndate: 2023-02-01\ndescription: \"A brief introduction/refresher to executing SQL in R and translating between SQL and dplyr syntax.\"\ncategories: [R, SQL, dplyr]\npage-layout: full\nimage: \"SQL and R/images/dbplyr_badge.png\"\n---\n\n\nA promising direction in the world of data analytics and data science is the push to homogenize commonly-used tools into a common interface. Given my background in R, the prospect of working with SQL *completely inside of RStudio* has always been very appealing to me. This blog serves as a very *brief* and *introductory* review of how to execute SQL in R along with a couple of other related features. While this brief guide is not intended to serve as an introduction to SQL syntax, it is my intent that it can be shared with those who are new to SQL with R.\n\nTo begin, we will load the packages that will be utilized in this blog.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(\n  \"dplyr\", ## Data Manipulation in R\n  \"sqldf\", ## Running SQL Queries in R\n  \"dbplyr\", ## Translating dplyr Syntax to SQL Syntax\n  \"DBI\", ## Connecting to a Database\n  \"odbc\", ## Connecting to a Database\n  \"tidyquery\", ## Translating SQL Syntax to dplyr Syntax\n  install = FALSE\n)\n```\n:::\n\n\n### Setting Up Databases\n\nIn practice, executing SQL in R requires connection to a pre-existing SQL database. For the purpose of this blog, however, we will just be using a temporary database stored in a local RStudio session. We will store this database as an object call `con`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncon <- DBI::dbConnect(RSQLite::SQLite(), \":memory:\")\n```\n:::\n\n\nFor practical reasons, the syntax above will not be sufficient. Each connection will look different, dependent on various circumstances (the type of relational database management system (RDBMS) being used, log-in information, etc.), so the following example is just that; an example using completely made-up information. However, it does serve as a template for real information to be plugged into.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncon <- dbConnect(odbc(),\n                 Driver = ,\n                 Server = ,\n                 Database = ,\n                 UID = ,\n                 PWD = ,\n                 Port = )\n```\n:::\n\n\nReturning to the database we created, it is empty and has no data stored in it. To keep things simple, we are going to load the `mtcars` data set. We first begin by loading the data into RStudio. The second line of code copies this data set into the local database that we created. Now that we have copied this data into the local database, we can remove the `mtcars` data set from the local environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"mtcars\")\n\ndbWriteTable(conn = con,\n             name = \"mtcars\",\n             value = mtcars)\n\nrm(mtcars)\n```\n:::\n\n\n### Running a SQL Query in R\n\nNow that we have the `mtcars` data in our database, we can run a SQL query to retrieve information from this data. Using the `dbGetQuery` command, we can execute SQL syntax to return desired information. Here, we are writing a query to return a table which tells us the average miles per gallon for automatic vehicles grouped by the number of cylinders the vehicle has and ordered by miles per gallon from the highest to lowest values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquery_1 <- dbGetQuery(con,\n  'SELECT ROUND(AVG(mpg)) as avg_mpg, cyl\n   FROM mtcars\n   WHERE am = 1\n   GROUP BY cyl\n   ORDER BY avg_mpg DESC;'\n)\n\ntibble(query_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  avg_mpg   cyl\n    <dbl> <dbl>\n1      28     4\n2      21     6\n3      15     8\n```\n:::\n:::\n\n\nIn contrast, if you wanted to execute a query on a data frame object instead of pulling from a database, you can use `sqldf`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquery_2 <- sqldf(\n  'SELECT ROUND(AVG(mpg)) as avg_mpg, cyl\n   FROM mtcars\n   WHERE am = 1\n   GROUP BY cyl\n   ORDER BY avg_mpg DESC;'\n)\n\ntibble(query_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  avg_mpg   cyl\n    <dbl> <dbl>\n1      28     4\n2      21     6\n3      15     8\n```\n:::\n:::\n\n\n### Running a SQL Chunk in RMarkdown/Quarto\n\nWe can conveniently execute a SQL query in R without relying on a specific command like `dbGetQuery`. Using RMarkdown or Quarto, we can specify a SQL code chunk. Within the code chunk, you will need to specify the connection (`con` in our case) and, optionally, the object that the results of the query will be stored in. In the output below, you would begin the code chunk with `{sql, connection = con, output.var = \"query_2\"}`.\n\n\n::: {.cell}\n\n```{.eval .cell-code}\nSELECT\n  ROUND(AVG(mpg)) AS avg_mpg,\n  cyl\nFROM mtcars\nWHERE am = 1\nGROUP BY cyl\nORDER BY avg_mpg DESC;\n```\n:::\n\n\nNote that if you are going to be using SQL chunks frequently, it is worth specifying the default connection for SQL chunks as demonstrated below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::opts_chunk$set(connection = \"con\")\n```\n:::\n\n\n### Translating dplyr Syntax to SQL Syntax and Vice Versa\n\nAnother very helpful tool that bridges the gap between SQL and dplyr syntax is the `show_query` command. Personally, I found this tool incredibly valuable when learning SQL because of my background in R. Essentially, what this tool does is translate dplyr syntax into SQL syntax. In the opposite direction, through the `tidyquery` package, we also have the capability to the exact opposite and translate SQL syntax into dplyr syntax. Below demonstrates the functionality of these two commands for the same query. First, translating dplyr syntax to SQL syntax:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl(con, \"mtcars\") %>%\n  filter(am == 1) %>%\n  group_by(cyl) %>%\n  summarise(avg_mpg = round(mean(mpg))) %>%\n  ungroup() %>%\n  arrange(dplyr::desc(avg_mpg)) %>%\n  show_query()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<SQL>\nSELECT `cyl`, ROUND(AVG(`mpg`), 0) AS `avg_mpg`\nFROM `mtcars`\nWHERE (`am` = 1.0)\nGROUP BY `cyl`\nORDER BY `avg_mpg` DESC\n```\n:::\n:::\n\n\nNow, we will do the opposite\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshow_dplyr(\n  \"SELECT\n    ROUND(AVG(mpg)) AS avg_mpg,\n    cyl\n   FROM mtcars\n   WHERE am = 1\n   GROUP BY cyl\n   ORDER BY avg_mpg DESC;\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nmtcars %>%\n  filter(am == 1) %>%\n  group_by(cyl) %>%\n  summarise(avg_mpg = round(mean(mpg, na.rm = TRUE))) %>%\n  ungroup() %>%\n  arrange(dplyr::desc(avg_mpg))\n```\n:::\n:::\n\n\nObviously, as one's knowledge in both SQL and R increases, the further capabilities of executing SQL in R can be explored. My hope is that this serves as a helpful introductory for those seeking to integrate data science tools together.",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}